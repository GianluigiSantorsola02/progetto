{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Eclipse Kura\u2122 Documentation The emergence of an Internet of Thing (IoT) service gateway model running modern software stacks, operating on the edge of an IoT deployment as an aggregator and controller, has opened up the possibility of enabling enterprise level technologies to IoT gateways. Advanced software frameworks, which abstract and isolate the developer from the complexity of the hardware and the networking sub-systems, re-define the development and re-usability of integrated hardware and software solutions. Eclipse Kura is an Eclipse IoT project that provides a platform for building IoT gateways. It is a smart application container that enables remote management of such gateways and provides a wide range of APIs for allowing you to write and deploy your own IoT application. Kura runs on top of the Java Virtual Machine (JVM) and leverages OSGi, a dynamic component system for Java, to simplify the process of writing reusable software building blocks. Kura APIs offer easy access to the underlying hardware including serial ports, GPS, watchdog, USB, GPIOs, I2C, etc. It also offer OSGI bundle to simplify the management of network configurations, the communication with IoT servers, and the remote management of the gateway. Kura components are designed as configurable OSGi Declarative Service exposing service API and raising events. While several Kura components are in pure Java, others are invoked through JNI and have a dependency on the Linux operating system. Kura comes with the following services: I/O Services Serial port access through javax.comm 2.0 API or OSGi I/O connection USB access and events through javax.usb, HID API, custom extensions Bluetooth access through javax.bluetooth or OSGi I/O connection Position Service for GPS information from an NMEA stream Clock Service for the synchronization of the system clock Kura API for GPIO/PWM/I2C/SPI access Data Services Store and forward functionality for the telemetry data collected by the gateway and published to remote servers. Policy-driven publishing system, which abstracts the application developer from the complexity of the network layer and the publishing protocol used. Eclipse Paho and its MQTT client provide the default messaging library used. Cloud Services Easy to use API layer for IoT application to communicate with a remote server. In addition to simple publish/subscribe, the Cloud Service API simplifies the implementation of more complex interaction flows like request/response or remote resource management. Allow for a single connection to a remote server to be shared across more than one application in the gateway providing the necessary topic partitioning. Configuration Service Leverage the OSGi specifications ConfigurationAdmin and MetaType to provide a snapshot service to import/export the configuration of all registered services in the container. Remote Management Allow for remote management of the IoT applications installed in Kura including their deployment, upgrade and configuration management. The Remote Management service relies on the Configuration Service and the Cloud Service. Networking Provide API for introspects and configure the network interfaces available in the gateway like Ethernet, Wifi, and Cellular modems. Watchdog Service Register critical components to the Watchdog Service, which will force a system reset through the hardware watchdog when a problem is detected. Web administration interface Offer a web-based management console running within the Kura container to manage the gateway. Drivers and Assets A unified model is introduced to simplify the communication with the devices attached to the gateway. The Driver encapsulates the communication protocol and its configuration parameters, while the Asset, which is generic across Drivers, models the information data channels towards the device. When an Asset is created, a Mirror of the device is automatically available for on-demand read and writes via Java APIs or via Cloud through remote messages. Wires Offers modular and visual data flow programming tool to define data collection and processing pipelines at the edge by simply selecting components from a palette and wiring them together. This way users can, for example, configure an Asset, periodically acquire data from its channels, store them in the gateway, filter or aggregate them using powerful SQL queries, and send the results to the Cloud. The Eclipse Kura Marketplace is a repository from which additional Wires components can be installed into your Kura runtime with a simple drag-and-drop.","title":"Home"},{"location":"#welcome-to-the-eclipse-kuratm-documentation","text":"The emergence of an Internet of Thing (IoT) service gateway model running modern software stacks, operating on the edge of an IoT deployment as an aggregator and controller, has opened up the possibility of enabling enterprise level technologies to IoT gateways. Advanced software frameworks, which abstract and isolate the developer from the complexity of the hardware and the networking sub-systems, re-define the development and re-usability of integrated hardware and software solutions. Eclipse Kura is an Eclipse IoT project that provides a platform for building IoT gateways. It is a smart application container that enables remote management of such gateways and provides a wide range of APIs for allowing you to write and deploy your own IoT application. Kura runs on top of the Java Virtual Machine (JVM) and leverages OSGi, a dynamic component system for Java, to simplify the process of writing reusable software building blocks. Kura APIs offer easy access to the underlying hardware including serial ports, GPS, watchdog, USB, GPIOs, I2C, etc. It also offer OSGI bundle to simplify the management of network configurations, the communication with IoT servers, and the remote management of the gateway. Kura components are designed as configurable OSGi Declarative Service exposing service API and raising events. While several Kura components are in pure Java, others are invoked through JNI and have a dependency on the Linux operating system. Kura comes with the following services: I/O Services Serial port access through javax.comm 2.0 API or OSGi I/O connection USB access and events through javax.usb, HID API, custom extensions Bluetooth access through javax.bluetooth or OSGi I/O connection Position Service for GPS information from an NMEA stream Clock Service for the synchronization of the system clock Kura API for GPIO/PWM/I2C/SPI access Data Services Store and forward functionality for the telemetry data collected by the gateway and published to remote servers. Policy-driven publishing system, which abstracts the application developer from the complexity of the network layer and the publishing protocol used. Eclipse Paho and its MQTT client provide the default messaging library used. Cloud Services Easy to use API layer for IoT application to communicate with a remote server. In addition to simple publish/subscribe, the Cloud Service API simplifies the implementation of more complex interaction flows like request/response or remote resource management. Allow for a single connection to a remote server to be shared across more than one application in the gateway providing the necessary topic partitioning. Configuration Service Leverage the OSGi specifications ConfigurationAdmin and MetaType to provide a snapshot service to import/export the configuration of all registered services in the container. Remote Management Allow for remote management of the IoT applications installed in Kura including their deployment, upgrade and configuration management. The Remote Management service relies on the Configuration Service and the Cloud Service. Networking Provide API for introspects and configure the network interfaces available in the gateway like Ethernet, Wifi, and Cellular modems. Watchdog Service Register critical components to the Watchdog Service, which will force a system reset through the hardware watchdog when a problem is detected. Web administration interface Offer a web-based management console running within the Kura container to manage the gateway. Drivers and Assets A unified model is introduced to simplify the communication with the devices attached to the gateway. The Driver encapsulates the communication protocol and its configuration parameters, while the Asset, which is generic across Drivers, models the information data channels towards the device. When an Asset is created, a Mirror of the device is automatically available for on-demand read and writes via Java APIs or via Cloud through remote messages. Wires Offers modular and visual data flow programming tool to define data collection and processing pipelines at the edge by simply selecting components from a palette and wiring them together. This way users can, for example, configure an Asset, periodically acquire data from its channels, store them in the gateway, filter or aggregate them using powerful SQL queries, and send the results to the Cloud. The Eclipse Kura Marketplace is a repository from which additional Wires components can be installed into your Kura runtime with a simple drag-and-drop.","title":"Welcome to the Eclipse Kura\u2122 Documentation"},{"location":"intro/docker-quick-start/","text":"Docker Quick Start Installation Eclipse Kura is also available as a Docker container available in Docker Hub . To download and run, use the following command: docker run -d -p 443:443 -t eclipse/kura This command will start Kura in background and the Kura Web Ui will be available through port 443. Once the image is started you can navigate your browser to https://localhost and log in using the credentials admin : admin . Command Toolbox Following, a set of useful Docker command that can be used to list and manage Docker containers. For more details on Docker commands, please reference the official Docker documentation List Docker Images To list all the installed Docker images run: docker images List Running Docker Containers To list all the available instances (both running and powered off) run: docker ps -a Start/Stop a Docker Container docker stop <container id> docker start <container id> where <container id> is the instance identification number.","title":"Docker Quick Start"},{"location":"intro/docker-quick-start/#docker-quick-start","text":"","title":"Docker Quick Start"},{"location":"intro/docker-quick-start/#installation","text":"Eclipse Kura is also available as a Docker container available in Docker Hub . To download and run, use the following command: docker run -d -p 443:443 -t eclipse/kura This command will start Kura in background and the Kura Web Ui will be available through port 443. Once the image is started you can navigate your browser to https://localhost and log in using the credentials admin : admin .","title":"Installation"},{"location":"intro/docker-quick-start/#command-toolbox","text":"Following, a set of useful Docker command that can be used to list and manage Docker containers. For more details on Docker commands, please reference the official Docker documentation","title":"Command Toolbox"},{"location":"intro/docker-quick-start/#list-docker-images","text":"To list all the installed Docker images run: docker images","title":"List Docker Images"},{"location":"intro/docker-quick-start/#list-running-docker-containers","text":"To list all the available instances (both running and powered off) run: docker ps -a","title":"List Running Docker Containers"},{"location":"intro/docker-quick-start/#startstop-a-docker-container","text":"docker stop <container id> docker start <container id> where <container id> is the instance identification number.","title":"Start/Stop a Docker Container"},{"location":"intro/intel-up-2-quick-start/","text":"Intel Up\u00b2 Quick Start Overview This section provides Eclipse Kura\u2122 quick installation procedures for the Intel Up\u00b2 and the Kura development environment. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the following image: ubuntu-20.04.4-live-server-amd64.iso downloaded from https://releases.ubuntu.com/20.04/ubuntu-20.04.4-live-server-amd64.iso and with the image burned on an USB stick with balenaEtcher . A complete guide on how to install Ubuntu on the Intel Up\u00b2 can be found here . It is important, in order to access the HAT, Bluetooth, Wifi functionality, to follow the relative steps provided in the complete guide. Make sure to assign the right execute permissions to kurad user created by the installer as described here: Add Groups . It is high raccomanded to install the custom Intel kernel provided in the guide. Eclipse Kura\u2122 Installation To install Kura with its dependencies on the Intel Up\u00b2, perform the following steps: Boot the Intel Up\u00b2 with the Ubuntu Image 20.04.3. Make sure your device is connected to internet. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/<version>/kura_<version>_intel-up2-ubuntu-20_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: apt-get install./ kura_<version>_intel-up2-ubuntu-20_installer.deb Set the right Wi-Fi regulatory domain based on your current world region editing the /etc/default/crda and adding the ISO 3166-1 alpha-2 code of your region. Reboot the Intel Up\u00b2 with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Intel Up\u00b2 Quick Start"},{"location":"intro/intel-up-2-quick-start/#intel-up2-quick-start","text":"","title":"Intel Up\u00b2 Quick Start"},{"location":"intro/intel-up-2-quick-start/#overview","text":"This section provides Eclipse Kura\u2122 quick installation procedures for the Intel Up\u00b2 and the Kura development environment. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the following image: ubuntu-20.04.4-live-server-amd64.iso downloaded from https://releases.ubuntu.com/20.04/ubuntu-20.04.4-live-server-amd64.iso and with the image burned on an USB stick with balenaEtcher . A complete guide on how to install Ubuntu on the Intel Up\u00b2 can be found here . It is important, in order to access the HAT, Bluetooth, Wifi functionality, to follow the relative steps provided in the complete guide. Make sure to assign the right execute permissions to kurad user created by the installer as described here: Add Groups . It is high raccomanded to install the custom Intel kernel provided in the guide.","title":"Overview"},{"location":"intro/intel-up-2-quick-start/#eclipse-kura-installation","text":"To install Kura with its dependencies on the Intel Up\u00b2, perform the following steps: Boot the Intel Up\u00b2 with the Ubuntu Image 20.04.3. Make sure your device is connected to internet. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/<version>/kura_<version>_intel-up2-ubuntu-20_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: apt-get install./ kura_<version>_intel-up2-ubuntu-20_installer.deb Set the right Wi-Fi regulatory domain based on your current world region editing the /etc/default/crda and adding the ISO 3166-1 alpha-2 code of your region. Reboot the Intel Up\u00b2 with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Eclipse Kura&trade; Installation"},{"location":"intro/nvidia-jetson-nano-quick-start/","text":"NVIDIA Jetson Nano\u2122 - Quick Start Overview This section provides Eclipse Kura\u2122 quick installation procedures for the NVIDIA Jetson Nano\u2122. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the following image: jetson-nano-jp46-sd-card-image.zip downloaded from https://developer.nvidia.com/jetson-nano-sd-card-image and with the image burned on a SD card with Etcher . The official images can be found on the Jetson Nano Developer Kit Getting Starteg Guide . Further information on the Ubuntu installation for the NVIDIA Jetson Nano\u2122 can be found here . Eclipse Kura\u2122 Installation To install Eclipse Kura with its dependencies on the NVIDIA Jetson Nano\u2122, perform the following steps: Boot the NVIDIA Jetson Nano\u2122 with the latest Jetson Nano Developer Kit SD Card image. Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_nvidia-jetson-nano_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt install ./kura_<version>_nvidia-jetson-nano_installer.deb All the required dependencies will be downloaded and installed. Reboot the NVIDIA Jetson Nano\u2122 with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"NVIDIA Jetson Nano&trade; - Quick Start"},{"location":"intro/nvidia-jetson-nano-quick-start/#nvidia-jetson-nano-quick-start","text":"","title":"NVIDIA Jetson Nano&trade; - Quick Start"},{"location":"intro/nvidia-jetson-nano-quick-start/#overview","text":"This section provides Eclipse Kura\u2122 quick installation procedures for the NVIDIA Jetson Nano\u2122. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the following image: jetson-nano-jp46-sd-card-image.zip downloaded from https://developer.nvidia.com/jetson-nano-sd-card-image and with the image burned on a SD card with Etcher . The official images can be found on the Jetson Nano Developer Kit Getting Starteg Guide . Further information on the Ubuntu installation for the NVIDIA Jetson Nano\u2122 can be found here .","title":"Overview"},{"location":"intro/nvidia-jetson-nano-quick-start/#eclipse-kura-installation","text":"To install Eclipse Kura with its dependencies on the NVIDIA Jetson Nano\u2122, perform the following steps: Boot the NVIDIA Jetson Nano\u2122 with the latest Jetson Nano Developer Kit SD Card image. Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_nvidia-jetson-nano_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt install ./kura_<version>_nvidia-jetson-nano_installer.deb All the required dependencies will be downloaded and installed. Reboot the NVIDIA Jetson Nano\u2122 with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Eclipse Kura&trade; Installation"},{"location":"intro/raspberry-pi-raspbian-quick-start/","text":"Raspberry Pi - Raspbian Quick Start Overview This section provides Eclipse Kura\u2122 quick installation procedures for the Raspberry Pi and the Kura development environment. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page This quickstart has been tested using the following image: 2021-10-30-raspios-bullseye-armhf.zip downloaded from https://downloads.raspberrypi.org/raspios_armhf/images/raspios_armhf-2021-11-08/2021-10-30-raspios-bullseye-armhf.zip Enable SSH Access The ssh server is disabled by default on Raspbian images released after November 2016, in order to enable it to follow the instructions available at the following URL: https://www.raspberrypi.org/documentation/remote-access/ssh/ Eclipse Kura\u2122 Installation The last Raspbian Stretch adopts the new Consistent Network Device Naming . To correctly run Eclipse Kura on the Raspberry Pi, it should be disabled adding the net.ifnames=0 parameter at the end of the /boot/cmdline.txt file. To install Eclipse Kura with its dependencies on the Raspberry Pi, perform the following steps: Boot the Raspberry Pi with the latest Raspbian image (starting from release 5.1.0 Kura is tested with Raspbian 11). Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_raspberry-pi_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt-get install ./kura_<version>_raspberry-pi_installer.deb It could happen that wlan interface is \"soft blocked\" by default and needs to be enabled. To see if it is blocked run: rfkill list and unblock it with: sudo rfkill unblock wlan Set the right Wi-Fi regulatory domain based on your current world region following the instructions here . In case of problems, you could try to edit the /etc/default/crda adding the ISO 3166-1 alpha-2 code of your region Reboot the Raspberry Pi with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Raspberry Pi - Raspbian Quick Start"},{"location":"intro/raspberry-pi-raspbian-quick-start/#raspberry-pi-raspbian-quick-start","text":"","title":"Raspberry Pi - Raspbian Quick Start"},{"location":"intro/raspberry-pi-raspbian-quick-start/#overview","text":"This section provides Eclipse Kura\u2122 quick installation procedures for the Raspberry Pi and the Kura development environment. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page This quickstart has been tested using the following image: 2021-10-30-raspios-bullseye-armhf.zip downloaded from https://downloads.raspberrypi.org/raspios_armhf/images/raspios_armhf-2021-11-08/2021-10-30-raspios-bullseye-armhf.zip","title":"Overview"},{"location":"intro/raspberry-pi-raspbian-quick-start/#enable-ssh-access","text":"The ssh server is disabled by default on Raspbian images released after November 2016, in order to enable it to follow the instructions available at the following URL: https://www.raspberrypi.org/documentation/remote-access/ssh/","title":"Enable SSH Access"},{"location":"intro/raspberry-pi-raspbian-quick-start/#eclipse-kura-installation","text":"The last Raspbian Stretch adopts the new Consistent Network Device Naming . To correctly run Eclipse Kura on the Raspberry Pi, it should be disabled adding the net.ifnames=0 parameter at the end of the /boot/cmdline.txt file. To install Eclipse Kura with its dependencies on the Raspberry Pi, perform the following steps: Boot the Raspberry Pi with the latest Raspbian image (starting from release 5.1.0 Kura is tested with Raspbian 11). Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_raspberry-pi_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt-get install ./kura_<version>_raspberry-pi_installer.deb It could happen that wlan interface is \"soft blocked\" by default and needs to be enabled. To see if it is blocked run: rfkill list and unblock it with: sudo rfkill unblock wlan Set the right Wi-Fi regulatory domain based on your current world region following the instructions here . In case of problems, you could try to edit the /etc/default/crda adding the ISO 3166-1 alpha-2 code of your region Reboot the Raspberry Pi with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with an untrusted certificate: Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Eclipse Kura&trade; Installation"},{"location":"intro/raspberry-pi-ubuntu-20-quick-start/","text":"Raspberry Pi - Ubuntu 20 Quick Start Overview This section provides Eclipse Kura\u2122 quick installation procedures for the Raspberry Pi. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the Ubuntu 20.04.3 LTS Live Server for arm64 architecture flashed on the sd card through Raspberry Pi Imager . The official images can be also found on the Project Page . Further information on the Ubuntu installation for Raspberry Pi can be found here . Please note that, at the time of this writing, only 64 bit OS image is supported. Enable SSH Access On Ubuntu 20.04.3 the ssh access is enabled only for the standard ubuntu user. If you desire to remote login as root user, edit the file /etc/ssh/sshd_config (using the root permission) adding the line PermitRootLogin yes Eclipse Kura\u2122 Installation To install Eclipse Kura with its dependencies on the Raspberry Pi, perform the following steps: Boot the Raspberry Pi with the latest Ubuntu 20.04.3 LTS Server image. Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_raspberry-pi-ubuntu-20_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt install ./kura_<version>_raspberry-pi-ubuntu-20_installer.deb All the required dependencies will be downloaded and installed. Set the right Wi-Fi regulatory domain based on your current world region editing the /etc/default/crda and adding the ISO 3166-1 alpha-2 code of your region. Reboot the Raspberry Pi with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with a self signed certificate, select Accept the risk and continue : Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Raspberry Pi - Ubuntu 20 Quick Start"},{"location":"intro/raspberry-pi-ubuntu-20-quick-start/#raspberry-pi-ubuntu-20-quick-start","text":"","title":"Raspberry Pi - Ubuntu 20 Quick Start"},{"location":"intro/raspberry-pi-ubuntu-20-quick-start/#overview","text":"This section provides Eclipse Kura\u2122 quick installation procedures for the Raspberry Pi. This quickstart will install the version of Kura with the administrative web UI and network configuration support but not CAN support. For more information on this please visit the Eclipse Kura download page . This quickstart has been tested using the Ubuntu 20.04.3 LTS Live Server for arm64 architecture flashed on the sd card through Raspberry Pi Imager . The official images can be also found on the Project Page . Further information on the Ubuntu installation for Raspberry Pi can be found here . Please note that, at the time of this writing, only 64 bit OS image is supported.","title":"Overview"},{"location":"intro/raspberry-pi-ubuntu-20-quick-start/#enable-ssh-access","text":"On Ubuntu 20.04.3 the ssh access is enabled only for the standard ubuntu user. If you desire to remote login as root user, edit the file /etc/ssh/sshd_config (using the root permission) adding the line PermitRootLogin yes","title":"Enable SSH Access"},{"location":"intro/raspberry-pi-ubuntu-20-quick-start/#eclipse-kura-installation","text":"To install Eclipse Kura with its dependencies on the Raspberry Pi, perform the following steps: Boot the Raspberry Pi with the latest Ubuntu 20.04.3 LTS Server image. Make sure your device is connected to internet. By default, eth0 lan network interface is configured in DHCP mode. Upgrade the system: sudo apt update sudo apt upgrade Download the Kura package with: wget http://download.eclipse.org/kura/releases/&lt;version&gt;/kura_&lt;version&gt;_raspberry-pi-ubuntu-20_installer.deb Note: replace <version> in the URL above with the version number of the latest release (e.g. 5.1.0). Install Kura with: sudo apt install ./kura_<version>_raspberry-pi-ubuntu-20_installer.deb All the required dependencies will be downloaded and installed. Set the right Wi-Fi regulatory domain based on your current world region editing the /etc/default/crda and adding the ISO 3166-1 alpha-2 code of your region. Reboot the Raspberry Pi with: sudo reboot Kura starts on the target platform after reboot. Kura setups a local web ui that is available using a browser via: https://<device-ip> The browser will prompt the user to accept the connection to an endpoint with a self signed certificate, select Accept the risk and continue : Once trusted the source, the user will be redirected to a login page where the default username is: admin and the default password is: admin","title":"Eclipse Kura&trade; Installation"}]}